import{_ as e,c as i,a8 as s,o as t}from"./chunks/framework.CEV-pc2D.js";const u=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"guide/data-types.md","filePath":"guide/data-types.md"}'),r={name:"guide/data-types.md"};function l(o,a,d,n,h,c){return t(),i("div",null,a[0]||(a[0]=[s(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>在 Python 中，数据类型包含<a href="#字符串">字符串</a>、<a href="#整数">整数</a>、<a href="#浮点数">浮点数</a>、<a href="#布尔值">布尔值</a>、<a href="#空值">空值</a>、<a href="#列表">列表</a>、<a href="#元祖">元祖</a>。</p><h2 id="_01-字符串" tabindex="-1">01<br> 字符串 <a class="header-anchor" href="#_01-字符串" aria-label="Permalink to &quot;01&lt;br/&gt; 字符串&quot;">​</a></h2><h3 id="字符串用法" tabindex="-1">字符串用法 <a class="header-anchor" href="#字符串用法" aria-label="Permalink to &quot;字符串用法&quot;">​</a></h3><p>以单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>括起来的任意文本，如<code>&#39;abc&#39;</code>，<code>&quot;123&quot;</code>。</p><h3 id="字符串特殊场景" tabindex="-1">字符串特殊场景 <a class="header-anchor" href="#字符串特殊场景" aria-label="Permalink to &quot;字符串特殊场景&quot;">​</a></h3><ul><li>既包含<code>&#39;&#39;</code>又包含<code>&quot;&quot;</code>时，需要使用转义字符<code>\\</code>来标识，如 <code>&#39;I\\&#39;m \\&quot;江湖聊IT\\&quot;!&#39;</code>。</li><li>若字符串内部包含很多字符需要转移，可使用 <code>r&#39;&#39;</code>。</li><li>若字符串内部有很多换行需要转移，可使用 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>，<code>...</code>是提示符。</li></ul><h2 id="_02-整数" tabindex="-1">02<br> 整数 <a class="header-anchor" href="#_02-整数" aria-label="Permalink to &quot;02&lt;br/&gt; 整数&quot;">​</a></h2><h2 id="_03-浮点数" tabindex="-1">03<br> 浮点数 <a class="header-anchor" href="#_03-浮点数" aria-label="Permalink to &quot;03&lt;br/&gt; 浮点数&quot;">​</a></h2><h2 id="_04-布尔值" tabindex="-1">04<br> 布尔值 <a class="header-anchor" href="#_04-布尔值" aria-label="Permalink to &quot;04&lt;br/&gt; 布尔值&quot;">​</a></h2><h3 id="布尔值用法" tabindex="-1">布尔值用法 <a class="header-anchor" href="#布尔值用法" aria-label="Permalink to &quot;布尔值用法&quot;">​</a></h3><p>包含 <code>True</code>、<code>False</code> 两种值，注意大小写。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;adult&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;teenager&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="布尔值特殊场景" tabindex="-1">布尔值特殊场景 <a class="header-anchor" href="#布尔值特殊场景" aria-label="Permalink to &quot;布尔值特殊场景&quot;">​</a></h3><ul><li><code>and</code> 运算是与运算，所有都是 <code>True</code>，<code>and</code> 运算结果才是 <code>True</code>。</li><li><code>or</code> 运算是或运算，只要有一个为 <code>True</code>，<code>or</code> 运算结果就是 <code>True</code>。</li><li><code>not</code> 运算是非运算，是一个单目运算符，把 <code>True</code> 变成 <code>False</code>，或把 <code>False</code> 变成 <code>True</code>。</li></ul><h2 id="_05-空值" tabindex="-1">05<br> 空值 <a class="header-anchor" href="#_05-空值" aria-label="Permalink to &quot;05&lt;br/&gt; 空值&quot;">​</a></h2><h2 id="_06-列表" tabindex="-1">06<br> 列表 <a class="header-anchor" href="#_06-列表" aria-label="Permalink to &quot;06&lt;br/&gt; 列表&quot;">​</a></h2><h2 id="_07-元祖" tabindex="-1">07<br> 元祖 <a class="header-anchor" href="#_07-元祖" aria-label="Permalink to &quot;07&lt;br/&gt; 元祖&quot;">​</a></h2>`,18)]))}const k=e(r,[["render",l]]);export{u as __pageData,k as default};
